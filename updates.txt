# 2012-07-31
1.修改个人信息:
    对普通用户来说仅仅是修改密码
    对企业用户来说,还需要完成对企业信息的更改

# 2012-07-04
1.Session: 添加的EnispSession对象用来简化Session值的存储和获取
    EnispSession主要操作的数据包括:
    1.用户名
    2.用户权限

# 2012-07-02
1.Model层的代码基本完成,开始进行业务功能层次
2.业务层首先从视图开始
    1.index.jsp:登录界面,检查用户是否已经登录,若已经登录,则跳转到主页面home.jsp
    否则用户需要输入用户名密码进行登录操作,显示内容包括:用户名密码输入框,登录Title文字,注册href,
    提交按钮,和一个信息输出框,用来显示一些跳转信息,或是登录错误信息
    2.register.jsp:注册界面,有两种用户类别可供选择,分为普通用户和企业用户


# 2012-07-01
1.新的ORM模型部分采用HashMap<String, String>进行数据存储操作,在性能上效率会有些微的降低,
但好处在于可以大大减小整个ORM源代码大小.
HashMap中的key需要与数据库中的字段名城一致.
2.Factory类,用于生成需要的Model对象,比如根据参数从用户发出的GET请求中获取对象,或者调用DBOperater
来从数据库中获取数据对象,同时还提供一些实用的方法等

# 2012-06-28
/* old */
/*1.添加mapper包,mapper包的作用:*/
/*    1.将model中的类与数据库中的表进行映射*/
2.终于想起了最初时对ORM的设计,所以废弃之前的设计

# 2012-06-27
1.新的对象关系映射应该具有的功能包括:
    1.Insert(增):
        1.向数据库插入对象时,需要提交除id列以外的所有字段信息,插入完成后会再执行一次查询操作,
        以获得新插入的对象在表中的id,同时整个方法也是以是否获得id字段数据,来确定是否数据插入
        成功(有些微风险,例如:插入操作成功,但查询出错);
    2.Delete(删)
        1.根据对象的id来进行删除
    3.Update(改)
        1.根据对象的id来进行更新
    4.Select(查)
        1.根据对象的id来进行查找
        2.根据对象的某些属性来匹配查找

2.Model层的构成:
    1.Cooperative:指各个公司之间的关系,相当于图(Graph)中的边(Edge)
    2.Enterprise:指公司的实体类,相当于图(Graph)中的点(Point)
    3.UserInfo:指Web端的用户信息,主要用于在Web端的登录操作,初步设定为每一个UserInfo实例与Enterprise一一
    对应
    4.User:真正的用户,根据权限分为三类:
        1.管理员,具有所有权限
        2.企业用户,包含一个UserInfo对象和一个Enterrpise对象,可以对隶属于其的公司资料进行更新和管理
        3.普通用户,只能通过查看和操作Applet来获取各个企业之间关系信息

/* old */
/*#3.Model类的一般构造:*/
/*    #1.包含对应的表名,TABLENAME*/
/*    #2.包含对应的字段名*/
/*    (以上以常量方式保存)*/
/*    3.和各字段一一对应的变量,以及相应的setter,getter*/
/*    4.构造方法有三种:(默认,无参数;全参数;除ID外所有参数)*/

# 2012-06-21
Projcet Initialization
